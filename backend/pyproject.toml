[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "fastnext-backend"
dynamic = ["version"]
description = "FastNext Framework Backend - Enterprise-grade FastAPI backend with comprehensive scaffolding system"
readme = "README.md"
license = "MIT"
requires-python = ">=3.11"
authors = [
    { name = "FastNext Team", email = "team@fastnext.dev" },
]
keywords = [
    "fastapi",
    "backend",
    "framework",
    "scaffolding",
    "crud",
    "enterprise",
    "async",
    "python",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Web Environment",
    "Framework :: FastAPI",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: Code Generators",
]
dependencies = [
    # Core FastAPI dependencies
    "fastapi>=0.104.0,<1.0.0",
    "uvicorn[standard]>=0.24.0,<1.0.0",
    
    # Database
    "sqlalchemy[asyncio]>=2.0.20,<3.0.0",
    "asyncpg>=0.28.0,<1.0.0",
    "alembic>=1.12.0,<2.0.0",
    
    # Authentication & Security
    "python-jose[cryptography]>=3.3.0,<4.0.0",
    "passlib[bcrypt]>=1.7.4,<2.0.0",
    "cryptography>=41.0.0,<42.0.0",
    
    # Validation
    "pydantic[email]>=2.5.0,<3.0.0",
    "pydantic-settings>=2.1.0,<3.0.0",
    
    # Async HTTP
    "httpx>=0.25.0,<1.0.0",
    
    # Caching
    "redis[hiredis]>=5.0.0,<6.0.0",
    
    # Background tasks
    "celery[redis]>=5.3.0,<6.0.0",
    
    # Utilities
    "python-dateutil>=2.8.0,<3.0.0",
    "structlog>=23.0.0,<24.0.0",
    "typer>=0.9.0,<1.0.0",
    "rich>=13.0.0,<14.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.7.0",
    "pre-commit>=3.6.0",
    "python-dotenv>=1.0.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.5.0",
    "factory-boy>=3.3.0",
    "faker>=20.0.0",
    "httpx>=0.25.0",
]
docs = [
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.25.0",
]
monitoring = [
    "prometheus-client>=0.19.0",
    "sentry-sdk[fastapi]>=1.38.0",
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
]

[project.urls]
Homepage = "https://github.com/fastnext/fastnext"
Documentation = "https://docs.fastnext.dev"
Repository = "https://github.com/fastnext/fastnext.git"
Changelog = "https://github.com/fastnext/fastnext/blob/main/CHANGELOG.md"

[project.scripts]
fastnext = "app.cli:main"
scaffold = "scaffold_cli:main"

[tool.hatch.version]
path = "app/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["app"]

# Black configuration
[tool.black]
line-length = 88
target-version = ["py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
    # directories
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | migrations
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["app", "tests"]
skip = ["migrations"]

# MyPy configuration
[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
strict_optional = true
show_error_codes = true
namespace_packages = true
exclude = [
    "migrations/",
    "venv/",
    ".venv/",
    "build/",
    "dist/",
]

[[tool.mypy.overrides]]
module = [
    "celery.*",
    "redis.*",
    "passlib.*",
    "jose.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
    "security: marks tests as security tests",
    "performance: marks tests as performance tests",
]
asyncio_mode = "auto"

# Coverage configuration
[tool.coverage.run]
source = ["app"]
omit = [
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/scaffolding/*",  # Generated code
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# Bandit security linting
[tool.bandit]
exclude_dirs = ["tests", "migrations", "venv", ".venv"]
skips = ["B101"]  # Skip assert_used test

# Pylint configuration
[tool.pylint.main]
load-plugins = [
    "pylint.extensions.code_style",
    "pylint.extensions.typing",
]
ignore = ["migrations", "venv", ".venv"]
ignore-patterns = ["test_*.py"]

[tool.pylint.messages_control]
disable = [
    "C0114",  # missing-module-docstring
    "C0115",  # missing-class-docstring
    "C0116",  # missing-function-docstring
    "R0903",  # too-few-public-methods
    "R0913",  # too-many-arguments
]

[tool.pylint.format]
max-line-length = 88

# Ruff linter (alternative to flake8)
[tool.ruff]
line-length = 88
target-version = "py311"
extend-exclude = [
    "migrations",
    ".venv",
    "venv",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011", "B018"]

# Pre-commit hooks
[tool.pre-commit]
repos = [
    {
        repo = "https://github.com/pre-commit/pre-commit-hooks",
        rev = "v4.5.0",
        hooks = [
            { id = "trailing-whitespace" },
            { id = "end-of-file-fixer" },
            { id = "check-yaml" },
            { id = "check-added-large-files" },
        ]
    },
    {
        repo = "https://github.com/psf/black",
        rev = "23.11.0",
        hooks = [
            { id = "black" }
        ]
    },
    {
        repo = "https://github.com/pycqa/isort",
        rev = "5.12.0",
        hooks = [
            { id = "isort" }
        ]
    },
]